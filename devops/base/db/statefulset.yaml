# Copyright 2021 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: timemachine
    cluster-name: timemachine-patroni
  name: timemachine-patroni-master
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    cluster-name: timemachine-patroni
    role: master
    app.kubernetes.io/name: patroni
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timemachine-patroni
  labels:
    app: timemachine
    cluster-name: timemachine-patroni
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      statefulset: timemachine-patroni
  serviceName: timemachine-patroni
  template:
    metadata:
      labels:
        app: timemachine
        statefulset: timemachine-patroni
        cluster-name: timemachine-patroni
        app.kubernetes.io/name: patroni
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: statefulset
                    operator: In
                    values:
                      - timemachine-patroni
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: postgresql
          image: image-registry.openshift-image-registry.svc:5000/bcgov/patroni-postgres:12.4-latest
          # Because we are using image reference to a tag, we need to always pull the image otherwise
          #   we end up with outdated/out-of-sync image depending on the node where it is running
          imagePullPolicy: Always
          ports:
            - containerPort: 8008
              protocol: TCP
            - containerPort: 5432
              protocol: TCP
          envFrom:
            - configMapRef:
                name: patroni-env
            - secretRef:
                name: patroni-creds
          resources:
            requests:
              cpu: 60m
              memory: 256Mi
            limits:
              cpu: 100m
              memory: 512Mi
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: PATRONI_KUBERNETES_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: PATRONI_KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: PATRONI_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 7
            failureThreshold: 3
            exec:
              command:
                - /usr/share/scripts/patroni/health_check.sh
          volumeMounts:
            - mountPath: /home/postgres/pgdata
              name: postgresql
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccountName: patroni
      terminationGracePeriodSeconds: 10
      # nodeSelector:
      #   name: "mcs-silver-app-03.dmz"
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        annotations:
          volume.beta.kubernetes.io/storage-class: netapp-file-standard
        labels:
          app: timemachine
        name: postgresql
      spec:
        storageClassName: netapp-file-standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
